@namespace HomeManagement.Components.Dialogs
@using MudBlazor
@using HomeManagement.Components.Dialogs
@inherits ComponentBase

<MudPaper Class="pa-4" Elevation="1" Style="min-width:500px;max-width:800px;">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h6">Discovered Devices</MudText>
        <MudTable T="SelectableDevice" Items="devices" Dense="true" Hover="true" Bordered="true" Class="my-2">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>IP</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Uptime</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><MudCheckBox T="bool" @bind-Value="context.Selected" /></MudTd>
                <MudTd>@context.Device.Ip</MudTd>
                <MudTd>@context.Device.Name</MudTd>
                <MudTd>@context.Device.UptimeSeconds</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No devices found</MudText>
            </NoRecordsContent>
        </MudTable>
        <MudProgressCircular Indeterminate="true" Style="@(loading ? "" : "display:none;")" />
        <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!devices.Any(d => d.Selected))" OnClick="Save">Add Selected</MudButton>
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    [CascadingParameter] IMudDialogInstance DialogReference { get; set; } = default!;
    [Parameter] public Task<List<Device>>? LoadTask { get; set; }

    private List<SelectableDevice> devices = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (LoadTask is not null)
        {
            try
            {
                var loaded = await LoadTask;
                devices = loaded.Select(d => new SelectableDevice { Device = d }).ToList();
            }
            catch { }
        }
        loading = false;
    }

    private void Save()
    {
        var chosen = devices.Where(d => d.Selected).Select(d => d.Device).ToList();
        DialogReference.Close(DialogResult.Ok(chosen));
    }

    private void Cancel() => DialogReference.Close(DialogResult.Cancel());
}
